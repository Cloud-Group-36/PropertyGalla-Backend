// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PropertyGalla.Data;

#nullable disable

namespace PropertyGalla.Migrations
{
    [DbContext(typeof(PropertyGallaContext))]
    [Migration("20250413131836_SeedDummyData")]
    partial class SeedDummyData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PropertyGalla.Models.ContactMessage", b =>
                {
                    b.Property<string>("MessageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("ContactMessages");

                    b.HasData(
                        new
                        {
                            MessageId = "MSG0001",
                            Message = "Can you send more photos?",
                            PropertyId = "PRO0001",
                            ReceiverId = "USE0001",
                            SenderId = "USE0002",
                            SentAt = new DateTime(2025, 4, 13, 13, 18, 35, 233, DateTimeKind.Utc).AddTicks(4181)
                        },
                        new
                        {
                            MessageId = "MSG0002",
                            Message = "Is the villa available next month?",
                            PropertyId = "PRO0004",
                            ReceiverId = "USE0004",
                            SenderId = "USE0003",
                            SentAt = new DateTime(2025, 4, 13, 13, 18, 35, 233, DateTimeKind.Utc).AddTicks(4293)
                        },
                        new
                        {
                            MessageId = "MSG0003",
                            Message = "I want to negotiate the price.",
                            PropertyId = "PRO0003",
                            ReceiverId = "USE0004",
                            SenderId = "USE0002",
                            SentAt = new DateTime(2025, 4, 13, 13, 18, 35, 233, DateTimeKind.Utc).AddTicks(4294)
                        },
                        new
                        {
                            MessageId = "MSG0004",
                            Message = "Is parking included?",
                            PropertyId = "PRO0002",
                            ReceiverId = "USE0001",
                            SenderId = "USE0003",
                            SentAt = new DateTime(2025, 4, 13, 13, 18, 35, 233, DateTimeKind.Utc).AddTicks(4295)
                        });
                });

            modelBuilder.Entity("PropertyGalla.Models.Feedback", b =>
                {
                    b.Property<string>("FeedbackId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("FeedbackId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            FeedbackId = "FED0001",
                            Comment = "Great communication!",
                            OwnerId = "USE0001",
                            Rating = 4,
                            ReviewerId = "USE0002",
                            SubmittedAt = new DateTime(2025, 4, 13, 13, 18, 35, 233, DateTimeKind.Utc).AddTicks(5222)
                        },
                        new
                        {
                            FeedbackId = "FED0002",
                            Comment = "Loved the property!",
                            OwnerId = "USE0001",
                            Rating = 5,
                            ReviewerId = "USE0003",
                            SubmittedAt = new DateTime(2025, 4, 13, 13, 18, 35, 233, DateTimeKind.Utc).AddTicks(5344)
                        },
                        new
                        {
                            FeedbackId = "FED0003",
                            Comment = "Nice but overpriced.",
                            OwnerId = "USE0004",
                            Rating = 3,
                            ReviewerId = "USE0002",
                            SubmittedAt = new DateTime(2025, 4, 13, 13, 18, 35, 233, DateTimeKind.Utc).AddTicks(5345)
                        },
                        new
                        {
                            FeedbackId = "FED0004",
                            Comment = "Helpful owner.",
                            OwnerId = "USE0004",
                            Rating = 4,
                            ReviewerId = "USE0003",
                            SubmittedAt = new DateTime(2025, 4, 13, 13, 18, 35, 233, DateTimeKind.Utc).AddTicks(5346)
                        });
                });

            modelBuilder.Entity("PropertyGalla.Models.Property", b =>
                {
                    b.Property<string>("PropertyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PropertyId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            PropertyId = "PRO0001",
                            CreatedAt = new DateTime(2025, 4, 13, 13, 18, 35, 233, DateTimeKind.Utc).AddTicks(1293),
                            Description = "Stylish loft in the city center",
                            Location = "Kuala Lumpur",
                            OwnerId = "USE0001",
                            Price = 3500.00m,
                            Status = "available",
                            Title = "Modern Loft",
                            UpdatedAt = new DateTime(2025, 4, 13, 13, 18, 35, 233, DateTimeKind.Utc).AddTicks(1408)
                        },
                        new
                        {
                            PropertyId = "PRO0002",
                            CreatedAt = new DateTime(2025, 4, 13, 13, 18, 35, 233, DateTimeKind.Utc).AddTicks(1514),
                            Description = "Beautiful view of the sea",
                            Location = "Penang",
                            OwnerId = "USE0001",
                            Price = 7500.00m,
                            Status = "available",
                            Title = "Beach House",
                            UpdatedAt = new DateTime(2025, 4, 13, 13, 18, 35, 233, DateTimeKind.Utc).AddTicks(1515)
                        },
                        new
                        {
                            PropertyId = "PRO0003",
                            CreatedAt = new DateTime(2025, 4, 13, 13, 18, 35, 233, DateTimeKind.Utc).AddTicks(1517),
                            Description = "Cozy studio for singles",
                            Location = "Cyberjaya",
                            OwnerId = "USE0004",
                            Price = 1800.00m,
                            Status = "rented",
                            Title = "Studio Flat",
                            UpdatedAt = new DateTime(2025, 4, 13, 13, 18, 35, 233, DateTimeKind.Utc).AddTicks(1517)
                        },
                        new
                        {
                            PropertyId = "PRO0004",
                            CreatedAt = new DateTime(2025, 4, 13, 13, 18, 35, 233, DateTimeKind.Utc).AddTicks(1519),
                            Description = "5-bedroom premium villa",
                            Location = "Shah Alam",
                            OwnerId = "USE0004",
                            Price = 12000.00m,
                            Status = "available",
                            Title = "Luxury Villa",
                            UpdatedAt = new DateTime(2025, 4, 13, 13, 18, 35, 233, DateTimeKind.Utc).AddTicks(1519)
                        });
                });

            modelBuilder.Entity("PropertyGalla.Models.PropertyImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "loft1.jpg",
                            PropertyId = "PRO0001"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "beach1.jpg",
                            PropertyId = "PRO0002"
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "studio1.jpg",
                            PropertyId = "PRO0003"
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "villa1.jpg",
                            PropertyId = "PRO0004"
                        });
                });

            modelBuilder.Entity("PropertyGalla.Models.Report", b =>
                {
                    b.Property<string>("ReportId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReporterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("ReporterId");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            ReportId = "REP0001",
                            CreatedAt = new DateTime(2025, 4, 13, 13, 18, 35, 233, DateTimeKind.Utc).AddTicks(6375),
                            PropertyId = "PRO0001",
                            Reason = "Fake images",
                            ReporterId = "USE0003",
                            Status = "pending"
                        },
                        new
                        {
                            ReportId = "REP0002",
                            CreatedAt = new DateTime(2025, 4, 13, 13, 18, 35, 233, DateTimeKind.Utc).AddTicks(6486),
                            PropertyId = "PRO0002",
                            Reason = "Wrong location info",
                            ReporterId = "USE0002",
                            Status = "reviewed"
                        },
                        new
                        {
                            ReportId = "REP0003",
                            CreatedAt = new DateTime(2025, 4, 13, 13, 18, 35, 233, DateTimeKind.Utc).AddTicks(6487),
                            PropertyId = "PRO0004",
                            Reason = "Price too high",
                            ReporterId = "USE0002",
                            Status = "dismissed"
                        },
                        new
                        {
                            ReportId = "REP0004",
                            CreatedAt = new DateTime(2025, 4, 13, 13, 18, 35, 233, DateTimeKind.Utc).AddTicks(6488),
                            PropertyId = "PRO0003",
                            Reason = "Spam listing",
                            ReporterId = "USE0003",
                            Status = "pending"
                        });
                });

            modelBuilder.Entity("PropertyGalla.Models.SavedProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("SavedProperties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PropertyId = "PRO0001",
                            UserId = "USE0002"
                        },
                        new
                        {
                            Id = 2,
                            PropertyId = "PRO0002",
                            UserId = "USE0002"
                        },
                        new
                        {
                            Id = 3,
                            PropertyId = "PRO0004",
                            UserId = "USE0003"
                        },
                        new
                        {
                            Id = 4,
                            PropertyId = "PRO0001",
                            UserId = "USE0003"
                        });
                });

            modelBuilder.Entity("PropertyGalla.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = "USE0001",
                            CreatedAt = new DateTime(2025, 4, 13, 13, 18, 35, 232, DateTimeKind.Utc).AddTicks(5358),
                            Email = "alice@admin.com",
                            Name = "Alice Admin",
                            Password = "JAvlGPq9JyTdtvBO6x2llnRI1+gxwIyPqCKAn3THIKk=",
                            Role = "admin"
                        },
                        new
                        {
                            UserId = "USE0002",
                            CreatedAt = new DateTime(2025, 4, 13, 13, 18, 35, 232, DateTimeKind.Utc).AddTicks(5942),
                            Email = "bob@buyer.com",
                            Name = "Bob Buyer",
                            Password = "5Ue9EyKCUN+0x98dHrt4z9nyraVuuwxCXTWCndOsSug=",
                            Role = "user"
                        },
                        new
                        {
                            UserId = "USE0003",
                            CreatedAt = new DateTime(2025, 4, 13, 13, 18, 35, 232, DateTimeKind.Utc).AddTicks(5965),
                            Email = "carol@customer.com",
                            Name = "Carol Customer",
                            Password = "sEHArrNbsPpKpmjKWpILWQGW/a+aAOuFLJt/TRI8xtY=",
                            Role = "user"
                        },
                        new
                        {
                            UserId = "USE0004",
                            CreatedAt = new DateTime(2025, 4, 13, 13, 18, 35, 232, DateTimeKind.Utc).AddTicks(5976),
                            Email = "dan@dev.com",
                            Name = "Dan Developer",
                            Password = "hydK8Bh2NBRVsy2AWUbycocbtC7/pmBNzPKLsCevqCs=",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("PropertyGalla.Models.ViewRequest", b =>
                {
                    b.Property<string>("ViewRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ViewRequestId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("ViewRequests");

                    b.HasData(
                        new
                        {
                            ViewRequestId = "VRQ0001",
                            CreatedAt = new DateTime(2025, 4, 13, 13, 18, 35, 233, DateTimeKind.Utc).AddTicks(3176),
                            PropertyId = "PRO0001",
                            Status = "pending",
                            Text = "I'd like to schedule a visit.",
                            UserId = "USE0002"
                        },
                        new
                        {
                            ViewRequestId = "VRQ0002",
                            CreatedAt = new DateTime(2025, 4, 13, 13, 18, 35, 233, DateTimeKind.Utc).AddTicks(3302),
                            PropertyId = "PRO0002",
                            Status = "pending",
                            Text = "Is this property still available?",
                            UserId = "USE0003"
                        },
                        new
                        {
                            ViewRequestId = "VRQ0003",
                            CreatedAt = new DateTime(2025, 4, 13, 13, 18, 35, 233, DateTimeKind.Utc).AddTicks(3304),
                            PropertyId = "PRO0003",
                            Status = "handled",
                            Text = "Interested in long-term rental.",
                            UserId = "USE0002"
                        },
                        new
                        {
                            ViewRequestId = "VRQ0004",
                            CreatedAt = new DateTime(2025, 4, 13, 13, 18, 35, 233, DateTimeKind.Utc).AddTicks(3305),
                            PropertyId = "PRO0001",
                            Status = "pending",
                            Text = "Can I see it this weekend?",
                            UserId = "USE0003"
                        });
                });

            modelBuilder.Entity("PropertyGalla.Models.ContactMessage", b =>
                {
                    b.HasOne("PropertyGalla.Models.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PropertyGalla.Models.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PropertyGalla.Models.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("PropertyGalla.Models.Feedback", b =>
                {
                    b.HasOne("PropertyGalla.Models.User", "Owner")
                        .WithMany("ReceivedFeedbacks")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PropertyGalla.Models.User", "Reviewer")
                        .WithMany("GivenFeedbacks")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("PropertyGalla.Models.Property", b =>
                {
                    b.HasOne("PropertyGalla.Models.User", "Owner")
                        .WithMany("OwnedProperties")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("PropertyGalla.Models.PropertyImage", b =>
                {
                    b.HasOne("PropertyGalla.Models.Property", "Property")
                        .WithMany("Images")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("PropertyGalla.Models.Report", b =>
                {
                    b.HasOne("PropertyGalla.Models.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PropertyGalla.Models.User", "Reporter")
                        .WithMany("SubmittedReports")
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("PropertyGalla.Models.SavedProperty", b =>
                {
                    b.HasOne("PropertyGalla.Models.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PropertyGalla.Models.User", "User")
                        .WithMany("SavedProperties")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PropertyGalla.Models.ViewRequest", b =>
                {
                    b.HasOne("PropertyGalla.Models.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PropertyGalla.Models.User", "User")
                        .WithMany("ViewRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PropertyGalla.Models.Property", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("PropertyGalla.Models.User", b =>
                {
                    b.Navigation("GivenFeedbacks");

                    b.Navigation("OwnedProperties");

                    b.Navigation("ReceivedFeedbacks");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SavedProperties");

                    b.Navigation("SentMessages");

                    b.Navigation("SubmittedReports");

                    b.Navigation("ViewRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
